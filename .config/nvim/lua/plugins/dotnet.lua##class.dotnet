return {
  {
    "GustavEikaas/easy-dotnet.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    ft = { "cs", "csproj" },
    opts = {
      auto_bootstrap_namespace = {
        type = "file_scoped",
      },
      test_runner = {
        viewmode = "vsplit",
        vsplit_width = 80,
        mappings = {
          run_test_from_buffer = { lhs = "<leader>tr", desc = "Run Test from Buffer" },
          peek_stack_trace_from_buffer = { lhs = "<leader>tp", desc = "peek stack trace from buffer" },
          debug_test_from_buffer = { lhs = "<leader>td", desc = "run test from buffer" },
          filter_failed_tests = { lhs = "<leader>fe", desc = "filter failed tests" },
          debug_test = { lhs = "d", desc = "debug test" },
          go_to_file = { lhs = "g", desc = "go to file" },
          run_all = { lhs = "R", desc = "run all tests" },
          run = { lhs = "r", desc = "run test" },
          peek_stacktrace = { lhs = "p", desc = "peek stacktrace of failed test" },
          expand = { lhs = "o", desc = "expand" },
          expand_node = { lhs = "E", desc = "expand node" },
          expand_all = { lhs = "O", desc = "expand all" },
          collapse_all = { lhs = "C", desc = "collapse all" },
          close = { lhs = "q", desc = "close testrunner" },
        },
      },
      picker = "snacks",
      debugger = {
        bin_path = "netcoredbg",
      },
      lsp = {
        config = {
          settings = {
            ["csharp|inlay_hints"] = {
              csharp_enable_inlay_hints_for_implicit_object_creation = true,
              csharp_enable_inlay_hints_for_implicit_variable_types = true,
              csharp_enable_inlay_hints_for_lambda_parameter_types = true,
              csharp_enable_inlay_hints_for_types = true,
              dotnet_enable_inlay_hints_for_indexer_parameters = true,
              dotnet_enable_inlay_hints_for_literal_parameters = true,
              dotnet_enable_inlay_hints_for_object_creation_parameters = true,
              dotnet_enable_inlay_hints_for_other_parameters = true,
              dotnet_enable_inlay_hints_for_parameters = true,
              dotnet_suppress_inlay_hints_for_parameters_that_differ_only_by_suffix = true,
              dotnet_suppress_inlay_hints_for_parameters_that_match_argument_name = true,
              dotnet_suppress_inlay_hints_for_parameters_that_match_method_intent = true,
            },
            ["csharp|code_lens"] = {
              dotnet_enable_references_code_lens = true,
              dotnet_enable_tests_code_lens = true,
            },
            ["csharp|completion"] = {
              dotnet_provider_regex_completions = true,
              dotnet_show_completion_items_from_unimported_namespaces = true,
              dotnet_show_name_completion_suggestions = true,
            },
            ["csharp|background_analysis"] = {
              background_analysis_dotnet_compiler_diagnostics_scope = "fullSolution",
              background_analysis_dotnet_analyzers_diagnostics_scope = "fullSolution",
            },
            ["csharp|symbol_search"] = {
              dotnet_search_reference_assemblies = true,
            },
          },
        },
      },
    },
    keys = {
      { "<leader>N", "", desc = "dotnet" },

      { "<leader>Nt", "", desc = "Testing" },
      {
        "<leader>Ntt",
        function()
          require("easy-dotnet").test()
        end,
        desc = "Test Project",
      },
      {
        "<leader>NtT",
        function()
          require("easy-dotnet").test_solution()
        end,
        desc = "Test Solution",
      },
      {
        "<leader>Nto",
        function()
          require("easy-dotnet").testrunner()
        end,
        desc = "Testrunner Open",
      },
      {
        "<leader>Ntr",
        function()
          require("easy-dotnet").testrunner_refresh()
        end,
        desc = "Testrunner Refresh",
      },
      {
        "<leader>NtR",
        function()
          require("easy-dotnet").testrunner_refresh_build()
        end,
        desc = "Testrunner Build and Refresh",
      },

      { "<leader>Np", "", desc = "Packages" },
      {
        "<leader>Npa",
        function()
          require("easy-dotnet").add_package()
        end,
        desc = "Add Package",
      },
      {
        "<leader>Npd",
        function()
          require("easy-dotnet").remove_package()
        end,
        desc = "Remove Package",
      },
      {
        "<leader>Npo",
        function()
          require("easy-dotnet").outdated()
        end,
        desc = "Outdated",
      },
      {
        "<leader>NpA",
        function()
          require("easy-dotnet").solution_add()
        end,
        desc = "Add to solution",
      },
      {
        "<leader>NpR",
        function()
          require("easy-dotnet").solution_add()
        end,
        desc = "Remove from solution",
      },

      { "<leader>Ne", "", desc = "Entity Framework" },
      {
        "<leader>Ner",
        function()
          require("easy-dotnet").ef_migrations_remove()
        end,
        desc = "Migrations Remove",
      },
      {
        "<leader>Nea",
        function()
          require("easy-dotnet").ef_migrations_add(vim.fn.input("Enter name:"))
        end,
        desc = "Migrations Add",
      },
      {
        "<leader>Nel",
        function()
          require("easy-dotnet").ef_migrations_list()
        end,
        desc = "Migrations List",
      },
      {
        "<leader>Ned",
        function()
          require("easy-dotnet").ef_database_drop()
        end,
        desc = "Database Drop",
      },
      {
        "<leader>Neu",
        function()
          require("easy-dotnet").ef_database_update()
        end,
        desc = "Database Update",
      },
      {
        "<leader>NeU",
        function()
          require("easy-dotnet").ef_database_update_pick()
        end,
        desc = "Database Update Pick",
      },

      {
        "<leader>Nn",
        function()
          require("easy-dotnet").new()
        end,
        desc = "New",
      },
      {
        "<leader>Nc",
        function()
          require("easy-dotnet").createfile(vim.fn.expand("%:p:h"))
        end,
        desc = "Create File",
      },
      {
        "<leader>Nb",
        function()
          require("easy-dotnet").build_quickfix()
        end,
        desc = "Build Project",
      },
      {
        "<leader>NB",
        function()
          require("easy-dotnet").build_solution()
        end,
        desc = "Build Solution",
      },
      {
        "<leader>N<space>",
        function()
          require("easy-dotnet").project_view()
        end,
        desc = "Project View",
      },
      {
        "<leader>Nr",
        function()
          require("easy-dotnet").run()
        end,
        desc = "Run",
      },
      {
        "<leader>Ns",
        function()
          require("easy-dotnet").secrets()
        end,
        desc = "Secrets",
      },
      {
        "<leader>Nx",
        function()
          require("easy-dotnet").clean()
        end,
        desc = "Clean",
      },
      {
        "<leader>NX",
        function()
          require("easy-dotnet").restore()
        end,
        desc = "Restore",
      },
      { "<leader>Nd", "", desc = "Diagnostics" },
      {
        "<leader>Ndw",
        function()
          require("easy-dotnet.actions.diagnostics").get_workspace_diagnostics("warning")
        end,
        desc = "Warnings",
      },
      {
        "<leader>Nde",
        function()
          require("easy-dotnet.actions.diagnostics").get_workspace_diagnostics("error")
        end,
        desc = "Errors",
      },
    },
  },
  {
    "mason-org/mason.nvim",
    opts = {
      registries = {
        "github:mason-org/mason-registry",
      },
      ensure_installed = { "csharpier", "netcoredbg" },
    },
  },
  {
    "nvim-treesitter/nvim-treesitter",
    opts = { ensure_installed = { "c_sharp" } },
  },
  {
    "stevearc/conform.nvim",
    optional = true,
    opts = {
      formatters_by_ft = {
        cs = { "csharpier" },
      },
      formatters = {
        csharpier = {
          command = "csharpier",
          args = { "format", "--write-stdout" },
          stdin = true,
          require_cwd = true,
        },
      },
    },
  },
  {
    "mfussenegger/nvim-dap",
    optional = true,
    opts = function()
      local dap = require("dap")
      if not dap.adapters["netcoredbg"] then
        require("dap").adapters["netcoredbg"] = {
          type = "executable",
          command = vim.fn.exepath("netcoredbg"),
          args = { "--interpreter=vscode" },
          options = {
            detached = false,
          },
        }
      end
      for _, lang in ipairs({ "cs", "fsharp", "vb" }) do
        if not dap.configurations[lang] then
          dap.configurations[lang] = {
            {
              type = "netcoredbg",
              name = "Launch file",
              request = "launch",
              ---@diagnostic disable-next-line: redundant-parameter
              program = function()
                return vim.fn.input("Path to dll: ", vim.fn.getcwd() .. "/", "file")
              end,
              cwd = "${workspaceFolder}",
            },
          }
        end
      end

      require("easy-dotnet.netcoredbg").register_dap_variables_viewer()
    end,
  },
}
