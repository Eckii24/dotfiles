#!/bin/bash

# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set -eu

# Function to add Homebrew to PATH
add_brew_to_path() {
  if [[ -x "/opt/homebrew/bin/brew" ]]; then
    # Apple Silicon (ARM)
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -x "/usr/local/bin/brew" ]]; then
    # Intel Mac
    eval "$(/usr/local/bin/brew shellenv)"
  elif [[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    # Linux
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
}

echo "Create .local/bin and add it to PATH"
bin_dir="$HOME/.local/bin"
mkdir -p "$bin_dir"
export PATH="$PATH:$bin_dir"

# ---- This part is mainly copied from the YADM docs

# Directory to look for bootstrap executables in
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

if [[ ! -d "$BOOTSTRAP_D" ]]; then
  echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
  exit 1
fi

declare -a bootstraps
while IFS= read -r bootstrap; do
  if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ ~$ ]]; then
    bootstraps+=("$bootstrap")
  fi
done < <(find -L "$BOOTSTRAP_D" -type f | sort)

for bootstrap in "${bootstraps[@]}"; do
  if ! "$bootstrap"; then
    echo "Error: bootstrap '$bootstrap' failed" >&2
    exit 1
  fi

  # Manual adjustment to ensure, brew is correctly setup
  # and can be accessed by all bootstrap scripts.
  # The eval command will only export the "set" command,
  # if they are not already set.
  add_brew_to_path
done

echo "Finishing up bootstrapping"
